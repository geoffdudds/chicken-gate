name: Tests

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install CI dependencies (excludes RPi.GPIO)
          pip install -e .[ci]

      - name: Set up test environment variables
        run: |
          echo "TESTING=true" >> $GITHUB_ENV
          echo "CHICKEN_GATE_EMAIL_SENDER=test@example.com" >> $GITHUB_ENV
          echo "CHICKEN_GATE_EMAIL_PASSWORD=test_password" >> $GITHUB_ENV
          echo "CHICKEN_GATE_EMAIL_RECIPIENT=test_recipient@example.com" >> $GITHUB_ENV

      - name: Run all tests with pytest
        run: |
          # Add src to Python path
          export PYTHONPATH="${PYTHONPATH}:$(pwd)/src"
          pytest test/ -v --tb=short --maxfail=10

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-py${{ matrix.python-version }}
          path: |
            pytest_cache/
            .coverage

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          # Install CI dependencies (includes ruff, mypy, and project deps)
          pip install -e .[ci]

      - name: Lint and format check with ruff
        run: |
          # Check formatting
          ruff format --check --diff src/ test/
          # Run linting
          ruff check src/ test/

      - name: Type check with mypy
        run: |
          mypy src/ || true  # Don't fail CI on mypy errors for now

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install security scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          # Install project dependencies for security scanning
          pip install -e .[dev]

      - name: Run security scan with bandit
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/

      - name: Check for known security vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
          safety check
